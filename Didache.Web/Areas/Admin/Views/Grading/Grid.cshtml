@model List<UserTaskData>

@{
    ViewBag.Title = "Grid";
}

<h2>Grid</h2>


<style>
	
	
.grading-grid {
	border: solid 1px #999;
	border-collapse: collapse;
	margin: 100px 0 0 0 ;
}
.grading-grid td, .grading-grid th{
	border: solid 1px #999;	
	border-width: 0 1px;	
}
/*
.grading-grid thead th {
	width: 60px;
	overflow: hidden;
	height: 60px;	
	text-align: left;
}
*/
.grading-grid thead th {
	text-align: left;
}

    /* Outer span is just a reference for the inner span */
    .grading-grid thead th > span {
      position: relative;
    }
    .grading-grid thead th > span > span {
      /* Must remove span from normal flow in order to keep columns from widening */
      position: absolute;
      left: -0.5px; 
        /* 
          So far only Firefox does subpixel positioning = 
            ignored by Opera, Chrome and Safari .
          But they got this right (visually) in the first place.
          This rule puts the rotated span exactly in place for Firefox
          (tested on Linux and Windows July 2010)
        */
      white-space: nowrap;
      -moz-transform: rotate(-65deg) skewX(25deg);
      -o-transform: rotate(-65deg) skewX(25deg);
      -webkit-transform: rotate(-65deg) skewX(25deg);
      -moz-transform-origin: 0% 0%;
      -o-transform-origin: 0% 0%;
      -webkit-transform-origin: 0% 0%;
      border: 1px solid;
      padding: 9px;
      height: 23px; /* 1.3 em = 23px in Opera and 23.4 in FFox (1em = 18px) */
      width: 120px;
      /* Illustrate where it's at with color */
      background-color: yellow;
      /* If one wants centered text, this is the place to reset it */
      /* From a design point of view it might not be desirable */
      /* text-align: left; */
    }
    .grading-grid thead th > span > span.unit {
    	background: #00f;
    	color: #fff;
    }
   .grading-grid thead th > span > span > span {
      /* Rotate the text back, so it will be easier to read */
      -moz-transform: skewX(-25deg);
      -o-transform: skewX(-25deg);
      /* Safari and Chrome won't skew back, so the next line is actually redundant right now (checked July 2010 on Linux) */
      -webkit-transform: skewX(-25deg);
    }


.grading-grid tbody th {
	background: #00f;
	padding: 3px;
	color: #fff;
	text-align: left;
	white-space: nowrap;
}

.grading-grid tbody td {
	width: 60px;
	overflow: hidden;
	text-align: right;
}


.grading-grid input{
	border: 0;
	text-align: right;
}
.grading-grid tbody tr:nth-child(odd) {
	background: #eee;
}
.grading-grid tbody tr:nth-child(odd) input{
	background: #eee;
}
.grading-grid tbody tr input:focus{
	background: #3DA3E3;
}

.grading-grid tbody tr td input.dirty {
	
	background: #f44;
}

</style>

<table class="grading-grid">
	<thead>
		<tr>
		<% int lastUnitID = 0; %>
		<% foreach (Task t in ViewBag.AllTasks) { %>
			<%= (lastUnitID != t.UnitID) ? "<th><span><span class=\"unit\"><span>Unit " + t.Unit.SortOrder + "</span></span></span></th>" : ""%>
			<% lastUnitID = t.UnitID; %>
			<th><span><span><span><%= t.Unit.SortOrder + "-" + t.SortOrder + " - " + ((t.Name.Length > 15) ? t.Name.Substring(0, 15) + "..." : t.Name)%></span></span></span></th>
		<% } %>
		</tr>
	</thead>
	<tbody>
	
	<%	
		int lastUserID = 0; 
		lastUnitID = 0; 
	%>

	<% foreach (UserTaskData d in ViewBag.AllUserTaskData) { %>
	
		<%= (lastUserID != d.UserID) ? "<tr>" : "" %>
		
		<%= (lastUnitID != d.Task.UnitID) ? "<th>" + ((d.Profile != null) ? d.Profile.FormattedName : d.UserID.ToString()) + "</th>" : ""%>

		<td><input type="text" style="width:30px;" value="<%= d.NumericGrade %>" data-userid="<%= d.UserID %>" data-taskid="<%= d.TaskID %>" /></td>

		<% 
	  lastUserID = d.UserID;
	  lastUnitID = d.Task.UnitID;
	  %>
	
	<% } %>
	</tbody>
</table>

<script>
	jQuery(function ($) {
		$('table.grading-grid input[type=text]').bind('change', function (e) {
			$(this).addClass('dirty');
		});

		$('table.grading-grid input[type=text]').keyup(function (e) {

			if (e.keyCode >= 37 && e.keyCode <= 40) {

				var td = $(this).closest('td'),
					index = td.parent().find('td').index(td),
					m;

				switch (e.keyCode) {
					case 38: // UP

						m = td.closest('tr').prev('tr').find('td:eq(' + index.toString() + ')');
						break;

					case 40: // DOWN
						m = td.closest('tr').next('tr').find('td:eq(' + index.toString() + ')');
						break;

					case 37: // LEFT
						m = td.prev('td'); //.find('input[type=text]').focus();
						break;

					case 39: // RIGHT
						m = td.next('td'); //.find('input[type=text]').focus();
						break;

				}

				m.find('input[type=text]').focus();
			}
			//console.log(e.keyCode);

		});
	});
</script>