@model Didache.UserTaskData

@{
	List<InteractionThread> threads = Interactions.GetInteractionThreads(Model.TaskID);
}

@if (threads.Count > 0) {
<div class="task-interactions">
<div class="task-interactions-header">
    <span class="user">Name</span>
    <span class="date">Posted</span>
    <span class="date">Last Reply</span>
    <span class="total-replies">Replies</span>
    <div class="clear"></div>
</div>

@foreach (InteractionThread thread in threads) {
	<div class="task-interaction-thread" data-threadid="@thread.ThreadID">
		<div class="task-interaction-header">
			<span class="user">@(thread.User != null ? thread.User.FormattedName : "missing")</span>
			<span class="date">@thread.ThreadDate.ToShortDateString()</span>
			<span class="date">@thread.Posts.Last().PostDate.ToShortDateString()</span>
			<span class="total-replies">@(thread.Posts.Count - 1)</span>
		</div>
		<div class="task-interaction-list" style="display:none;">
			
		@foreach (InteractionPost post in thread.Posts) {
			<div class="task-interaction-post @(post.UserID == thread.UserID ? " thread-starter" : "")">
				<div class="user-info">
					@if (post.User != null) {
					<a href="@post.User.ProfileDisplayUrl">
						<img src="@post.User.ProfileImageUrl" />
						<span class="name">@(post.User.NickName.IsEmpty() ? post.User.FirstName : post.User.NickName) @(post.User.LastName.Substring(0, 1) + ".")</span>
					</a>
	 }
				</div>
				<div class="post-content">
					@Html.Raw(post.PostContentFormatted)
				</div>			
				<div class="post-date">
					@post.PostDate.ToLocalTime()
				</div>
			</div>	
	  	  
  }
	  
			<div class="add-reply">
				<textarea class="reply-text"></textarea>	
				<span class="add-reply-button"><input type="button" class="reply-button" value="Add reply" /> <a href="javascript:void(0)" class="collapse">Close</a></span>
			</div>	
		    
		</div>

	

	</div>
}
</div>
} else {
	<div class="interactions-none">
	No one has turned in an assignment yet, so there are no posts ready for interaction.
	</div>
}

<script>
    jQuery(function ($) {
        $('div.task-interaction .task-interaction-header').toggle(function () {
            $(this).siblings('.task-interaction-list').slideDown();
        }, function () {
            $(this).siblings('.task-interaction-list').slideUp();
        });

        $('.add-reply a.collapse').click(function () {
            $(this).closest('.task-interaction-list').slideUp();
        });

        $('div.task-interaction input.reply-button').click(function () {

            var button = $(this).attr('disabled', 'disabled');

            var text = button.siblings('textarea').attr('disabled', 'disabled').val();
            var threadID = button.closest('.task-interaction').data('threadid');


            $.ajax({
                url: '/courses/api/interactionreply',
                type: 'POST',
                data: {
                    text: text,
                    threadID: threadID
                },
                success: function (d) {

                    // create response
                    var target = button.closest('.add-reply');
                    $('<div class="task-interaction-post">' +
						'<div class="user-info">' +
							'<a href="@(Users.GetLoggedInUser().ProfileDisplayUrl)">' +
								'<img src="@(Users.GetLoggedInUser().ProfileImageUrl)" />' +
								'<span class="name">@(Users.GetLoggedInUser().FormattedName)</span>' +
							'</a>' +
						'</div>' +
						'<div class="post-content">' +
							text +
						'</div>' +
					'</div>').insertBefore(target);

                    // increase reply count
                    var replies = button.closest('.task-interaction').find('.total-replies');
                    var count = parseInt(replies.html(), 10);
                    replies.html((count + 1).toString());

                    // clean up
                    button.siblings('textarea').removeAttr('disabled').val('');
                    button.removeAttr('disabled');
                }
            });


        });
    });
</script>