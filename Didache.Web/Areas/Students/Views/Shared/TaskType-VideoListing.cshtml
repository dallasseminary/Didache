@model Didache.UserTaskData


@functions{
	
public List<VideoInfo> GetVideos(string externalThumbBase, string language, string courseCode, string versionInfo, string unitNumber, string singleVideoNumber) {
	List<VideoInfo> videoList = new List<VideoInfo>();

	// path with language
	string xmlPath = Settings.PlayerFilesLocation + courseCode + versionInfo + @"\titles\" + language + ".xml";

	// check language
	if (!File.Exists(xmlPath)) {
		// default back to english	
		xmlPath = Settings.PlayerFilesLocation + courseCode + versionInfo + @"\titles\en-US.xml";
	}

	// load XML
	if (File.Exists(xmlPath)) {
		System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
		doc.Load(xmlPath);

		Random random = new Random();
		int index = 1;

		// pull videos
		System.Xml.XmlNodeList videoNodes = doc.SelectNodes("//unit[@number=" + unitNumber + "]/video");
		foreach (System.Xml.XmlNode vNode in videoNodes) {

			string videoNumber = vNode.Attributes["number"].Value.ToString();

			if (String.IsNullOrEmpty(singleVideoNumber) || singleVideoNumber == videoNumber) {
			
				videoList.Add(new VideoInfo {
					SortOrder = index++,
					Title = vNode.Attributes["name"].Value,
					Duration = vNode.Attributes["duration"].Value,
					VideoUrl = String.Format("{0}/{1}/{2}_u{3}_v{4}.mp4", externalThumbBase, courseCode.ToLower() + versionInfo, courseCode.ToUpper() + versionInfo, unitNumber.PadLeft(3, '0'), videoNumber.PadLeft(3, '0')),
					ThumbnailFilename = String.Format("{0}_u{1}_v{2}_thumb.jpg", courseCode.ToUpper() + versionInfo, unitNumber.PadLeft(3, '0'), videoNumber.PadLeft(3, '0')),
					ThumbnailUrl = String.Format("{0}/{1}/{2}_u{3}_v{4}_thumb.jpg", externalThumbBase, courseCode.ToLower() + versionInfo, courseCode.ToUpper() + versionInfo, unitNumber.PadLeft(3, '0'), videoNumber.PadLeft(3, '0')),
					PercentComplete = random.Next(100),
					WatchUrl = "/player/#course=" + courseCode + versionInfo + "&unit=" + unitNumber + "&video=" + videoNumber + "&language=" + language,
					SlidesUrl = "/player/print-slides.aspx?course=" + courseCode + versionInfo + "&unit=" + unitNumber + "&video=" + videoNumber + "&language=" + language,
					TranscriptUrl = "/player/print-transcript.aspx?course=" + courseCode + versionInfo + "&unit=" + unitNumber + "&video=" + videoNumber + "&language=" + language
				});
			}
		}	
	} else {
		//Response.Write("Can't find: " + xmlPath + "<BR>");	
	}

	return videoList;
}

}

@{	
	
	string externalThumbBase = "https://dtsoe.s3.amazonaws.com"; // "http://oefiles.dts.edu";
	
	
	List<VideoInfo> Videos = new List<VideoInfo>();
	
	// TEST
	string language = Users.GetLoggedInUser().Language;
	string courseCode = Model.Task.Course.CourseCode;
	string versionInfo = (Model.Task.Course.VersionNumber > 1 ? "v" + Model.Task.Course.VersionNumber : "");
	string unitNumber = Model.Task.Unit.SortOrder.ToString();
		
	if (String.IsNullOrEmpty(Model.Task.CustomAttributes)) {
		
		// all defaults
		Videos.AddRange(GetVideos(externalThumbBase, language, courseCode, versionInfo, unitNumber, null)); 
	
	} else {
		string[] requestedVideos = Model.Task.CustomAttributes.Split(new char[] { ',' });
		
		foreach (string requestedVideo in requestedVideos) {
			string[] requestedVideoParts = requestedVideo.Trim().Split(new char[] { '_' });

			string requestedCourseCode = "";
			string requestedVersionInfo = "";
			string requestedUnitNumber = "";
			string requestedVideoNumber = "";
			
			if (requestedVideoParts.Length == 1) {
				requestedCourseCode = courseCode;
				requestedVersionInfo = versionInfo;
				requestedUnitNumber = unitNumber;
				requestedVideoNumber = requestedVideoParts[0].Trim();
			} else if (requestedVideoParts.Length == 2) {
				requestedCourseCode = courseCode;
				requestedVersionInfo = versionInfo;
				requestedUnitNumber = requestedVideoParts[0].Trim();
				requestedVideoNumber = requestedVideoParts[1].Trim();
			} else if (requestedVideoParts.Length == 3) {
				requestedCourseCode = requestedVideoParts[0].Trim();
				requestedUnitNumber = requestedVideoParts[1].Trim();
				requestedVideoNumber = requestedVideoParts[2].Trim();
				// check for second to last "v" as in BE101v2
				if (requestedCourseCode.Substring(requestedCourseCode.Length-2, 1) == "v") {
					requestedVersionInfo = requestedCourseCode.Substring(requestedCourseCode.Length - 2);
					requestedCourseCode = requestedCourseCode.Substring(0, requestedCourseCode.Length - 2);
				} else {
					requestedVersionInfo = "";
				}
			}

			//Response.Write(requestedVideo + " = " + requestedCourseCode + "|" + requestedVersionInfo + "|" + requestedUnitNumber + "|" + requestedVideoNumber + "<BR>");
			
			Videos.AddRange(GetVideos(externalThumbBase, language, requestedCourseCode, requestedVersionInfo, requestedUnitNumber, requestedVideoNumber)); 
		}
	}
}

@if (Request.Browser.IsMobileDevice || Request.UserAgent.ToLower().Contains("ipad")) {
	<div class="message-warning">
	Since you are on a mobile device, you might consider using <a href="https://online.dts.edu/mobile">online.dts.edu/mobile</a> 
	which will give you direct access to videos, slides, and transcripts in a mobile-friendly view.
	</div>
}

@Didache.Resources.labels.videos_totaltime : 
		@(TimeSpan.FromSeconds( Videos.Sum( v=>v.TotalSeconds) ).Hours ) 
		@Didache.Resources.labels.videos_hours, 
		@(TimeSpan.FromSeconds( Videos.Sum( v=>v.TotalSeconds) ).Minutes ) 
		@Didache.Resources.labels.videos_minutes<br />

<br /><br />

<div class="video-list">


@foreach (VideoInfo v in Videos) {
	<div class="video">

		<div class="video-thumb" @* title="You have watched about @((Double)v.Minutes*(Double)v.PercentComplete/100) out of the @v.Minutes minutes in this video" *@>
			<div class="video-options-container" style="background-image:url(@v.ThumbnailUrl);">
				<div class="video-options">
					<a class="icon watchvideo" target="_blank" href="@v.WatchUrl">@Didache.Resources.labels.videos_watch</a>
					<a class="icon slides" target="_blank" href="@v.SlidesUrl">@Didache.Resources.labels.videos_slides</a>
					<a class="icon transcript" target="_blank" href="@v.TranscriptUrl">@Didache.Resources.labels.videos_transcript</a>
				</div>
			</div>
			<div class="progress-outline" >
				<div class="progress-percent" style="width:@(v.PercentComplete)px"></div>
			</div>					
		</div>					
				
		<a class="video-info" href="@v.WatchUrl" target="_blank" @* x-title="You have watched about @((Double)v.Minutes * (Double)v.PercentComplete / 100) out of the @v.Minutes minutes in this video" *@>
			<span class="title">@v.Title</span>
			<span class="duration">@v.Minutes @Didache.Resources.labels.videos_minutes</span>
		</a>
	</div>

}
</div>

<a href="/player/print-transcript.aspx?course=@(courseCode + versionInfo)&unit=@Model.Task.Unit.SortOrder&language=@Users.GetLoggedInUser().Language" target="_blank" class="d-button">@Didache.Resources.labels.videos_printalltranscripts</a>
<a href="/player/print-slides.aspx?course=@(courseCode + versionInfo)&unit=@Model.Task.Unit.SortOrder&language=@Users.GetLoggedInUser().Language" target="_blank"  class="d-button">@Didache.Resources.labels.videos_printallslides</a>



@{Html.RenderPartial("TaskType-SimpleCompletion", Model); }

