@model Didache.UserTaskData

@{	
	
	List<VideoInfo> Videos = new List<VideoInfo>();

	string externalThumbBase = "http://dtsoe.s3.amazonaws.com"; // "http://oefiles.dts.edu";
	string xmlPath = System.Web.HttpContext.Current.Server.MapPath(String.Format("~/supportfiles/{0}/Titles/en-US.xml", Model.Task.Course.CourseCode));

	
	if (Request.Url.Host == "online.dts.edu") {
		xmlPath = @"e:\websites\my.dts.edu\web\playerfiles\" + Model.Task.Course.CourseCode + @"\titles\en-US.xml";
	}
			

	// load XML
	
	
	if (File.Exists(xmlPath))
	{
		System.Xml.XmlDocument doc = new System.Xml.XmlDocument();
		doc.Load(xmlPath);

		Random random = new Random();
		int index = 0;

		// pull videos
		System.Xml.XmlNodeList videoNodes = doc.SelectNodes("//unit[@number=" + Model.Task.Unit.SortOrder + "]/video");
		foreach (System.Xml.XmlNode vNode in videoNodes)
		{

			Videos.Add(new VideoInfo
						{
							SortOrder = index++,
							Title = vNode.Attributes["name"].Value,
							Duration = vNode.Attributes["duration"].Value,
							VideoUrl = String.Format("{0}/{1}/{2}_u{3}_v{4}.mp4", externalThumbBase, Model.Task.Course.CourseCode.ToLower(), Model.Task.Course.CourseCode.ToUpper(), Model.Task.Unit.SortOrder.ToString().PadLeft(3, '0'), vNode.Attributes["number"].Value.ToString().PadLeft(3, '0')),

							ThumbnailFilename = String.Format("{0}_u{1}_v{2}_thumb.jpg", Model.Task.Course.CourseCode.ToUpper(), Model.Task.Unit.SortOrder.ToString().PadLeft(3, '0'), vNode.Attributes["number"].Value.ToString().PadLeft(3, '0')),

							//ThumbnailUrl = String.Format("{0}/{1}/videos/{2}_u{3}_v{4}_thumb.jpg", locaThumbBase, Model.Course.CourseCode.ToLower(), Model.Course.CourseCode.ToUpper(), Model.Unit.UnitNumber.ToString().PadLeft(3, '0'), vNode.Attributes["number"].Value.ToString().PadLeft(3, '0')),
							ThumbnailUrl = String.Format("{0}/{1}/{2}_u{3}_v{4}_thumb.jpg", externalThumbBase, Model.Task.Course.CourseCode.ToLower(), Model.Task.Course.CourseCode.ToUpper(), Model.Task.Unit.SortOrder.ToString().PadLeft(3, '0'), vNode.Attributes["number"].Value.ToString().PadLeft(3, '0')),
							PercentComplete = random.Next(100)
						});
		}
	} else {
		Response.Write("can't find: " + xmlPath);	
	}
	
}

<div class="video-list">
@foreach (VideoInfo v in Videos) {
	<div class="video">

		<div class="video-thumb"  title="You have watched about @((Double)v.Minutes*(Double)v.PercentComplete/100) out of the @v.Minutes minutes in this video">
			<div class="video-options-container" style="background-image:url(@v.ThumbnailUrl);">
				<div class="video-options">
					<a class="icon watchvideo" href="https://my.dts.edu/player4/#course=@Model.Task.Course.CourseCode&unit=@Model.Task.Unit.SortOrder&video=@v.SortOrder">watch</a>
					<a class="icon slides" href="https://my.dts.edu/player4/print-slides.ashx?course=@Model.Task.Course.CourseCode&unit=@Model.Task.Unit.SortOrder&video=@v.SortOrder">slides</a>
					<a class="icon transcript" href="https://my.dts.edu/player4/print-transcript.ashx?@Model.Task.Course.CourseCode&unit=@Model.Task.Unit.SortOrder&video=@v.SortOrder">transcript</a>
				</div>
			</div>
			<div class="progress-outline" >
				<div class="progress-percent" style="width:@(v.PercentComplete)px"></div>
			</div>					
		</div>					
				
		<a class="video-info" href="javascript:void(0);" title="You have watched about @((Double)v.Minutes*(Double)v.PercentComplete/100) out of the @v.Minutes minutes in this video">
			<span class="title">@v.Title</span>
			<span class="duration">@v.FormattedDuration</span>
		</a>
	</div>

}
</div>

@{Html.RenderPartial("TaskType-SimpleCompletion", Model); }

